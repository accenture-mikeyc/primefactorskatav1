/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package primefactors;

import org.junit.Test;

import java.lang.reflect.Array;
import java.util.*;
import static org.junit.Assert.*;

public class PrimeFactorsTest {

    PrimeFactors number = new PrimeFactors();
    ArrayList<Integer> arr = new ArrayList<Integer>();

    public void tearDown(){
        arr.clear();
    }

    @Test public void testIfGivenOneReturnsAnEmptyList() {
        assertEquals(arr, number.findPrimeFactors(1));
    }
    @Test public void testIfGivenTwoReturnsAnArrayListWithTwo(){
        arr.add(2);
        assertEquals(arr, number.findPrimeFactors(2));
    }
    @Test public void testIfGivenThreeReturnsArrayListWithThree(){
        arr.add(3);
        assertEquals(arr, number.findPrimeFactors(3));
    }
    @Test public void testIfGivenFourReturnArrayListWithTwoTwos(){
        arr.add(2);
        arr.add(2);
        assertEquals(arr, number.findPrimeFactors(4));
    }
    @Test public void testIfGivenFiveReturnArrayListWithFive() {
        arr.add(5);
        assertEquals(arr, number.findPrimeFactors(5));
    }
    @Test public void testIfGivenSixReturnArrayListWithTwoAndThree() {
        arr.add(2);
        arr.add(3);
        assertEquals(arr, number.findPrimeFactors(6));
    }
    @Test public void testIfGivenSevenReturnsArrayListWithSeven() {
        arr.add(7);
        assertEquals(arr, number.findPrimeFactors(7));
    }
    @Test public void testIfGivenEightReturnsArrayListWithTwoTwoTwo() {
        arr.add(2);
        arr.add(2);
        arr.add(2);
        assertEquals(arr, number.findPrimeFactors(8));
        
    }
    @Test public void testIfGivenNineReturnArrayWithThreeThree() {
        arr.add(3);
        arr.add(3);
        assertEquals(arr, number.findPrimeFactors(9));
    }
    @Test public void testIfGivenSeventyFiveReturnArrayListThreeFiveFive() {
        arr.add(3);
        arr.add(5);
        arr.add((5));
        assertEquals(arr, number.findPrimeFactors(75));
    }
    @Test public void testIfGivenThreeSixThreeReturnsArrayListThreeElevenEleven() {
        arr.add(3);
        arr.add(11);
        arr.add(11);
        assertEquals(arr, number.findPrimeFactors(363));
    }
    @Test public void testIfGivenSixteenReturnsArrayListTwoTwoTwoTwo() {
        arr.add(3);
        arr.add(3);
        arr.add(5);
        arr.add(5);
        arr.add(11);
        arr.add(13);
        assertEquals(arr, number.findPrimeFactors(32175));
    }
}
